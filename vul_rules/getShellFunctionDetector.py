import r2pipe
import json
import logging
from pwn import *
import r2pipe
import PwnContext as pwn
import angr
log = logging.getLogger(__name__)


def getShellFunctions(binary_name):
	getShellFunctions = {}
	#p1 = pwn.ctx.start()
	add_options = {
	    angr.options.ZERO_FILL_UNCONSTRAINED_MEMORY,
	    angr.options.ZERO_FILL_UNCONSTRAINED_REGISTERS,
	    angr.options.REVERSE_MEMORY_NAME_MAP,
	    #angr.options.STRICT_PAGE_ACCESS, # Raise a SimSegfaultError on illegal memory accesses
	    #angr.options.TRACK_ACTION_HISTORY,
	}
	remove_options = {
	    #angr.options.LAZY_SOLVES
	}
	elf = ELF(binary_name)
	if elf.pie : elf.address = 0x555555554000
	static_r2 = r2pipe.open(binary_name) if not elf.pie else r2pipe.open(binary_name,flags=['-B','0x555555554000'])
	static_r2.cmd('aaa')
	plt = {}
	for i in json.loads(static_r2.cmd('iij')):
		if i['plt'] and i['plt'] != 0x555555554000: plt[i['name']] = i['plt']
	elf.plt = plt
	p = angr.Project(binary_name, load_options={'auto_load_libs': False}, main_opts={'base_addr': 0x555555554000})
	cfg = p.analyses.CFG(normalize=True)
	state = p.factory.entry_state(add_options=add_options,remove_options=remove_options)
	state.libc.buf_symbolic_bytes = 0x1000
	state.libc.max_str_len = 0x1000
	state.libc.max_gets_size = 0x200 # 

	if 'system' in elf.plt:
		system_node = cfg.model.get_any_node(elf.plt['system'])
		print("node\n")
		print(system_node)
		for pre in system_node.predecessors:
			if pre.addr <= system_node.addr and pre.addr + pre.size < system_node.addr:
			    continue
			state = p.factory.blank_state(
			addr = pre.addr,
			mode = 'fastpath') # we don't want to do any solving
			simgr = p.factory.simgr(state)
			simgr.explore(find=pre.addr+pre.size-5)

			st = simgr.found[0]
			arg = st.memory.load(st.regs.rdi,8)
			if arg.uninitialized:
			    break
			cmd = st.solver.eval(st.memory.load(st.regs.rdi,8),cast_to=bytes)
			cmd13 = st.solver.eval(st.memory.load(st.regs.rdi,13),cast_to=bytes)
			if cmd in (b'/bin/sh\x00',b'cat flag') or cmd13 == b'/bin/cat flag':
			    getShellFunctions = pre.addr
			    pwn.log.info("Found system(\"%s\") win_addr :0x%x"%(cmd, pre.addr))
			    
			    return getShellFunctions
        
		pwn.log.info("No win found!")