import angr
from angr import sim_options as so
import claripy
import time
import timeout_decorator
import IPython
from .simgr_helper import overflow_detect_filter, hook_win, hook_four
import logging



def checkOverflow(binary_name, inputType="STDIN"):
	extras = {
		so.REVERSE_MEMORY_NAME_MAP,
		so.TRACK_ACTION_HISTORY,
		so.SYMBOL_FILL_UNCONSTRAINED_MEMORY,
		so.SYMBOL_FILL_UNCONSTRAINED_REGISTERS,
	}
 
	p = angr.Project(binary_name, load_options={"auto_load_libs": False})

	#Hook rands
	p.hook_symbol("rand", hook_four())
	p.hook_symbol("srand", hook_four())
	p.hook_symbol("system", hook_win())

	argv = [binary_name]
	input_arg = claripy.BVS("input", 200*8)
	# print(input_arg)
	# print(input_arg)
	if inputType == "STDIN":
		state = p.factory.full_init_state(args=argv, add_options=extras)
		state.globals["user_input"] = input_arg
	elif inputType == "LIBPWNABLE":
		handle_connection = p.loader.main_object.get_symbol("handle_connection")
		state = p.factory.full_init_state(args=argv,add_options=extras)
		state.globals["inputType"] = input_arg
	else:
		argv.append(input_arg)
		state = p.factory.full_init_state(args.argv)
		state.globals["user_input"] = input_arg

	state.libc.buf_symbolic_bytes = 0x100
	state.globals["inputType"] = inputType
	state.globals['rbp_list']={}
	simgr = p.factory.simgr(state, save_unconstrained=True)

	run_environ = {}
	run_environ["type"] = None
	end_state = None

	try:
		@timeout_decorator.timeout(120)
		def exploreBinary(simgr):
			simgr.explore(find=lambda s: "type" in s.globals, step_func=overflow_detect_filter)
		exploreBinary(simgr)

	except (KeyboardInterrupt, timeout_decorator.TimeoutError) as e:
		log.info("[~] Keyboard Interrupt")